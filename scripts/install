#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS rootfs

GRN="\e[32m"
CLR="\e[0m"


if [[ -z "$name" ]]; then name=initramfs; fi

ROOT=$(pwd)/ROOT

if [[ -d $ROOT ]]; then
  chmod -R u+w $ROOT &&
  rm    -rf    $ROOT || exit 200
fi
mkdir -p $ROOT || exit 201

#case $PLATFORM in
#  qemu)
#    gunzip -c `pwd`/../barebones/barebones.cpio.gz |
#    (
#      cd "$ROOT";
#      cpio -i -d -H newc --no-absolute-filenames
#    ) || exit 201
#  ;;
#esac


#
# Install system dependencies
#

TARGET=i686-nodeos-linux-musl

BAREBONES=`pwd`/../nodeos-barebones

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
PATH=$TOOLCHAIN/cross-tools/bin:/bin:/usr/bin

CC=$TARGET-gcc                       \
CXX=$TARGET-g++                      \
npm_config_prefix=$ROOT              \
$BAREBONES/deps/node/deps/npm/cli.js \
    install -g                       \
    `grep -v "^#" packages.txt`      || exit 210

ln -fs bin/century $ROOT/init || exit 211

mkdir -p $ROOT/sbin                               &&
ln -fs ../bin/nodeos-mount-rootfs $ROOT/sbin/init || exit 212


#
# /usr/bin/env
#

mkdir -p  $ROOT/usr/bin     &&
cp env.js $ROOT/usr/bin/env || exit 220


#
# Wrap the system up and pack it
#

# Set initramfs files only accesible to owner
chmod -R u-w,go-rw "$ROOT" || exit 230

case $PLATFORM in
  docker)
    docker build -t $name . || exit 231
  ;;
  qemu)
    (
      cd "$ROOT";
      find | cpio --owner root:root -o -H newc | gzip
    ) > $name.cpio.gz || exit 232
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
