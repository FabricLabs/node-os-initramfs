#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS rootfs

GRN="\e[32m"
CLR="\e[0m"


# Platform aliases
case $PLATFORM in
  pc|qemu)
    PLATFORM=pc_qemu
  ;;
  image)
    PLATFORM=pc_image
  ;;

  qemu_32)
    PLATFORM=pc_qemu_32
  ;;
  image_32)
    PLATFORM=pc_image_32
  ;;

  qemu_64)
    PLATFORM=pc_qemu_64
  ;;
  image_64)
    PLATFORM=pc_image_64
  ;;

  raspberry)
    PLATFORM=raspberry_qemu
  ;;
esac

# default CPU for each platform
if [[ -z "$CPU" ]]; then
  case $PLATFORM in
    docker)
      CPU=`uname -m`
    ;;
    docker_32)
      CPU=i686
    ;;
    docker_64)
      CPU=x86_64
    ;;

    pc_qemu|pc_image)
      CPU=`uname -m`
    ;;
    pc_qemu_32|pc_image_32)
      CPU=i686
    ;;
    pc_qemu_64|pc_image_64)
      CPU=x86_64
    ;;

    raspberry_qemu|raspberry_image)
      CPU=armv6
    ;;
  esac
fi

case $CPU in
  armv6)
    TARGET=$CPU-nodeos-linux-musleabihf
    NODE_ARCH=arm
  ;;
  i[456]86)
    TARGET=$CPU-nodeos-linux-musl
    NODE_ARCH=ia32
  ;;
  x86_64)
    TARGET=$CPU-nodeos-linux-musl
    NODE_ARCH=x64
  ;;
  *)
    echo "Unknown CPU '$CPU'"
    exit 1
  ;;
esac


if [[ -z "$name" ]]; then name=initramfs; fi

OBJ_DIR=$(pwd)/obj/$CPU

if [[ -d $OBJ_DIR ]]; then
  chmod -R u+w $OBJ_DIR &&
  rm    -rf    $OBJ_DIR || exit 200
fi
mkdir -p $OBJ_DIR || exit 201

#case $PLATFORM in
#  qemu)
#    gunzip -c `pwd`/../barebones/barebones.cpio.gz |
#    (
#      cd "$OBJ_DIR";
#      cpio -i -d -H newc --no-absolute-filenames
#    ) || exit 201
#  ;;
#esac


#
# Install system dependencies
#

NUM_JOBS=$((`getconf _NPROCESSORS_ONLN` + 1))

BAREBONES=`pwd`/../nodeos-barebones

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
NODE_DIR=$BAREBONES/deps/node

PATH=$TOOLCHAIN/out/bin:/bin:/usr/bin

CC=$TARGET-gcc                  \
CXX=$TARGET-g++                 \
npm_config_prefix=$OBJ_DIR      \
$NODE_DIR/deps/npm/cli.js       \
    install -g                  \
    --arch=$NODE_ARCH           \
    --nodedir=$NODE_DIR         \
    --jobs=$NUM_JOBS            \
    `grep -v "^#" packages.txt` || exit 210

ln -fs bin/century $OBJ_DIR/init || exit 211

mkdir -p $OBJ_DIR/sbin                               &&
ln -fs ../bin/nodeos-mount-rootfs $OBJ_DIR/sbin/init || exit 212


#
# /usr/bin/env
#

mkdir -p  $OBJ_DIR/usr/bin     &&
cp env.js $OBJ_DIR/usr/bin/env || exit 220


#
# Wrap the system up and pack it
#

# Set initramfs files only accesible to owner
chmod -R u-w,go-rw "$OBJ_DIR"             &&
chmod -R go+r      "$OBJ_DIR/usr/bin/env" || exit 230

case $PLATFORM in
  docker|docker_32|docker_64)
    docker build -t $name . || exit 231
  ;;
  pc_qemu  | pc_qemu_32  | pc_qemu_64  | \
  pc_image | pc_image_32 | pc_image_64 | \
  raspberry_qemu | raspberry_image)
    (
      cd "$OBJ_DIR";
      find | cpio --owner root:root -o -H newc | gzip
    ) > $name.cpio.gz || exit 232
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
