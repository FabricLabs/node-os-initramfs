#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS usersfs


set -o pipefail


GRN="\e[32m"
CLR="\e[0m"


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`
BAREBONES=`node -p "require('nodeos-barebones')"`

NODE_DIR=`node -p "require('nodejs')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh &&
source scripts/utils.sh                    || exit $?

PATH=$TOOLCHAIN/bin:$PATH


# Clean object dir and return the input error
function err(){
  rmStep $STEP_DIR
  exit $1
}


#
# Define steps paths
#

OBJ_FUSE=$OBJECTS/fuse
OBJ_INITRAMFS=$OBJECTS/initramfs
OUT_DIR=`pwd`/out/$CPU


#
# FUSE
#

grep -q "CONFIG_FUSE_FS=y" $BAREBONES/build/$CPU/linux/.config
HAS_FUSE=$?

if [[ $HAS_FUSE -eq 0 || $PLATFORM == docker ]]; then
  SRC_FUSE=`pwd`/deps/fuse
  STEP_DIR=$OBJ_FUSE

  if [[ ! -d $STEP_DIR ]]; then
    echo -e "${WHT}Compiling FUSE${CLR}"

    # Force re-creation of initramfs
    if [[ -d $OBJ_INITRAMFS ]]; then
      chmod -R u+w $OBJ_INITRAMFS &&
      rmStep       $OBJ_INITRAMFS || exit 14
    fi

    (
      mkdir -p $STEP_DIR &&
      cd $STEP_DIR       || exit 10

      # Configure
  #    CROSS_COMPILE="$TARGET-"  \
      MOUNT_FUSE_PATH=/bin  \
      CC=$TARGET-gcc        \
      CXX=$TARGET-g++       \
      $SRC_FUSE/configure   \
          --silent          \
          --prefix=/        \
          --host=$TARGET    \
          --disable-example \
          --disable-static  \
          --disable-util    || exit 11

      # Compile
      $MAKE || exit 12

      # Strip binary
      $TARGET-strip lib/.libs/libfuse.so || exit 13
    ) || err $?

    echo -e "${GRN}Successfully compiled FUSE${CLR}"
  fi
else
  echo -e "${WHT}FUSE is disabled${CLR}"
fi


#
# System dependencies
#

STEP_DIR=$OBJ_INITRAMFS

if [[ ! -d $STEP_DIR ]]; then
  echo -e "${WHT}Generating initramfs${CLR}"

  mkdir -p $STEP_DIR || exit 20

  (
    #case $PLATFORM in
    #  qemu)
    #    gunzip -c $BAREBONES/barebones.cpio.gz |
    #    (
    #      cd "$STEP_DIR";
    #      cpio -i -d -H newc --no-absolute-filenames
    #    ) || exit 21
    #  ;;
    #esac

    #
    # Install FUSE
    #

    if [ $HAS_FUSE -eq 0 ]; then
      mkdir -p $STEP_DIR/lib                              &&
      cp -d $OBJ_FUSE/lib/.libs/libfuse.so* $STEP_DIR/lib || exit 22

      eval "$NPMi" -g exclfs                       \
          --fuse__include_dirs=$SRC_FUSE/include   \
          --fuse__library_dirs=$OBJ_FUSE/lib/.libs \
          --fuse__libraries=-lfuse                 || exit 23
    fi

    #
    # Install system dependencies
    #

    PACKAGES=`node -p "require('./package.json').nodeosDependencies.join(' ')"`
    eval "$NPMi" -g $PACKAGES || exit 24

    mkdir -p $STEP_DIR/sbin                                  &&
    ln -fs /bin/nodeos-mount-filesystems $STEP_DIR/sbin/init || exit 27


    #
    # /usr/bin/env
    #

    mkdir -p             $STEP_DIR/usr/bin     &&
    ln -fs ../../bin/env $STEP_DIR/usr/bin/env || exit 28
  ) || err $?

  echo -e "${GRN}Successfully generated initramfs${CLR}"
fi


#
# Wrap the system up and pack it
#

# Set initramfs files only accesible to root
chmod -R u-w,go-rw "$OBJ_INITRAMFS"                            &&
chmod -R o+r       "$OBJ_INITRAMFS/lib/node_modules/usrbinenv" &&
chmod -R o+r       "$OBJ_INITRAMFS/usr/bin/env"                || exit 30

case $PLATFORM in
  docker|vagga)
    if [[ ! -f $OUT_DIR.tar ]]; then
      mkdir -p `dirname $OUT_DIR`

      (
        cd "$OBJ_INITRAMFS";
        tar --owner 0 --group 0 -H pax -c * || exit 40
      ) > $OUT_DIR.tar || exit $?
    fi

    ln -sf $CPU.tar out/latest || exit 41

    # Needed by vagga
    cp $BAREBONES/out/latest out/barebones.tar || exit 42
  ;;

  pc_* | raspberry_*)
    if [[ ! -f $OUT_DIR.cpio.gz ]]; then
      mkdir -p `dirname $OUT_DIR`

      (
        cd "$OBJ_INITRAMFS";
        find | cpio --owner 0:0 -o -H newc | gzip || exit 50
      ) > $OUT_DIR.cpio.gz || exit $?
    fi

    ln -sf $CPU.cpio.gz out/latest || exit 51
  ;;

  *)
    echo -e "${RED}Unknown platform '$PLATFORM'${CLR}"
    exit 60
  ;;
esac


echo -e "${GRN}Successfully built 'initramfs'${CLR}"
