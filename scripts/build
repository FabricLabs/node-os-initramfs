#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS usersfs


set -o pipefail


GRN="\e[32m"
CLR="\e[0m"


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

NODE_DIR=`node -p "require('nodeos-nodejs')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh &&
source scripts/utils.sh                    || exit $?

PATH=$TOOLCHAIN/bin:$PATH


# Build cross-compiler (if needed)
(
  cd $TOOLCHAIN
  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm run build || exit $?
) || exit $?


#
# Define steps paths
#

OBJ_FUSE=$OBJECTS/fuse
OBJ_INITRAMFS=$OBJECTS/initramfs
OUT_DIR=`pwd`/out/$CPU

SRC_FUSE=`pwd`/deps/fuse


#
# FUSE
#

STEP_DIR=$OBJ_FUSE

if [[ ! -d $STEP_DIR ]]; then
  echo -e "${WHT}Compiling FUSE${CLR}"

  # Force re-creation of initramfs
  if [[ -d $OBJ_INITRAMFS ]]; then
    chmod -R u+w $OBJ_INITRAMFS &&
    rmStep       $OBJ_INITRAMFS || exit 10
  fi

  (
    mkdir -p $STEP_DIR &&
    cd $STEP_DIR       || exit 11

    # Configure
#    CROSS_COMPILE="$TARGET-"  \
    MOUNT_FUSE_PATH=/bin  \
    CC=$TARGET-gcc        \
    CXX=$TARGET-g++       \
    $SRC_FUSE/configure   \
        --silent          \
        --prefix=/        \
        --host=$TARGET    \
        --disable-example \
        --disable-static  \
        --disable-util    || exit 12

    # Compile
    $MAKE || exit 13

    # Strip binary
    $TARGET-strip lib/.libs/libfuse.so || exit 14
  ) || err $?

  echo -e "${GRN}Successfully compiled FUSE${CLR}"
fi


#
# System dependencies
#

STEP_DIR=$OBJ_INITRAMFS

if [[ ! -d $STEP_DIR ]]; then
  echo -e "${WHT}Generating initramfs${CLR}"

  rmStep $OUT_DIR

  mkdir -p $STEP_DIR || err 20

  (
    #
    # Install FUSE
    #

    mkdir -p $STEP_DIR/lib                              &&
    cp -d $OBJ_FUSE/lib/.libs/libfuse.so* $STEP_DIR/lib || exit 21

    eval "$NPMi" -g exclfs                       \
        --fuse__include_dirs=$SRC_FUSE/include   \
        --fuse__library_dirs=$OBJ_FUSE/lib/.libs \
        --fuse__libraries=-lfuse                 || exit 22

    #
    # Install system dependencies
    #

    PACKAGES=`node -p "require('./package.json').nodeosDependencies.join(' ')"`
    eval "$NPMi" -g $PACKAGES || exit 23

    mkdir -p $STEP_DIR/sbin                                    &&
    ln -fs ../bin/nodeos-boot-multiUser $STEP_DIR/sbin/init || exit 24


    #
    # /usr/bin/env
    #

    mkdir -p             $STEP_DIR/usr/bin     &&
    ln -fs ../../bin/env $STEP_DIR/usr/bin/env || exit 25
  ) || err $?

  echo -e "${GRN}Successfully generated initramfs${CLR}"
fi


#
# Wrap the system up and pack it
#

STEP_DIR=$OUT_DIR

# Set initramfs files only accesible to root
chmod -R u-w,go-rw "$OBJ_INITRAMFS"                            &&
chmod -R o+r       "$OBJ_INITRAMFS/lib/node_modules/usrbinenv" &&
chmod -R o+r       "$OBJ_INITRAMFS/usr/bin/env"                || exit 30

if [[ ! -f $STEP_DIR ]]; then
  mkdir -p `dirname $STEP_DIR`

  (
    cd "$OBJ_INITRAMFS"                       &&
    find | cpio --owner 0:0 -o -H newc | gzip || exit 40
  ) > $STEP_DIR || err $?
fi

ln -sf $CPU out/latest || err 41


echo -e "${GRN}Successfully built 'initramfs'${CLR}"
