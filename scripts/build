#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS usersfs


set -o pipefail


GRN="\e[32m"
CLR="\e[0m"


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh &&
source scripts/utils.sh                    || exit $?

PATH=$TOOLCHAIN/bin:$PATH


# Build cross-compiler (if needed)
(
  cd $TOOLCHAIN

  # We can't use `--arch=$NODE_ARCH` because `prebuild` would install a
  # cross-compiler for a diferent host platform, so we set the desired target
  # platform using environment variables instead
  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit 1
) || exit $?


#
# Define steps paths
#

NODE_PLATFORM=linux

OUT_DIR=`pwd`/out/$CPU
PREBUILD=prebuilds/$NODE_PLATFORM-$NODE_ARCH.tar.gz


#
# FUSE
#

SRC_FUSE=`node -p "require('libfuse')"`

(
  cd $SRC_FUSE && eval "$NPMi" || exit 11
) || err $?


#
# System dependencies
#

STEP_DIR=$OBJECTS

if [[ ! -d $STEP_DIR ]]; then
  echo -e "${WHT}Generating initramfs${CLR}"

  rmStep $OUT_DIR


  # Install FUSE

  SRC_FUSE=$SRC_FUSE/out/$CPU

  mkdir -p                     $STEP_DIR/lib &&
  cp $SRC_FUSE/lib/libfuse.so* $STEP_DIR/lib || exit 20


  # Install usrbinenv

  eval "$NPMi" -g usrbinenv || err 21

  mkdir -p             $STEP_DIR/usr/bin     &&
  ln -fs ../../bin/env $STEP_DIR/usr/bin/env || err 22


  #
  # Install system init
  #

  # Default: multiple users system
  SINGLE_USER=${SINGLE_USER-"nodeos-boot-multiUser"}
  echo SINGLE_USER: \"$SINGLE_USER\"

  # Empty, single user system with `$HOME` in another partition
  if [[ -z "$SINGLE_USER" ]]; then
    INIT=nodeos-boot-singleUserMount

  # Multiple users system
  elif [[ "$SINGLE_USER" == "nodeos-boot-multiUser" ]]; then
    INIT=nodeos-boot-multiUser

  # Package defined, single process OS without persistence
  else
    (
      STEP_DIR=$STEP_DIR/tmp

      mkdir -p $STEP_DIR || exit 23

      eval "$NPMi" -g $SINGLE_USER || exit 24

      ln -fs bin/$SINGLE_USER $STEP_DIR/init || exit 25
    ) || err $?

    INIT=nodeos-boot-singleUser
  fi

  eval "$NPMi" -g $INIT --has_libblkid=false      \
      --fuse__include_dirs=$SRC_FUSE/include/fuse \
      --fuse__library_dirs=$SRC_FUSE/lib          \
      --fuse__libraries=-lfuse                    || err 26

  mkdir -p $STEP_DIR/sbin                 &&
  ln -fs ../bin/$INIT $STEP_DIR/sbin/init || err 27


  echo -e "${GRN}Successfully generated initramfs${CLR}"
fi


#
# Wrap the system up and pack it
#

STEP_DIR=$OUT_DIR

# Set initramfs files only accesible to root
chmod -R u-w,go-rw "$OBJECTS"                            &&
chmod -R o+r       "$OBJECTS/lib/node_modules/usrbinenv" &&
chmod -R o+r       "$OBJECTS/usr/bin/env"                || exit 30

if [[ ! -f $STEP_DIR ]]; then
  rmStep $PREBUILD

  mkdir -p `dirname $STEP_DIR`

  (
    cd "$OBJECTS"                             &&
    find | cpio --owner 0:0 -o -H newc | gzip || exit 40
  ) > $STEP_DIR || err $?
fi

ln -sf $CPU out/latest || err 41


echo -e "${GRN}Successfully built 'initramfs'${CLR}"


#
# Pack `nodeos-initramfs` in a node-gyp compatible way
#

# TODO use Node.js arch instead of explicit CPUs and move to BigRedButton

STEP_DIR=$PREBUILD

mkdir -p `dirname $STEP_DIR`          &&
tar -cf - out/$CPU out/latest | gzip > $STEP_DIR || err 100
