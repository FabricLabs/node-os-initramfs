#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS usersfs

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh &&
source scripts/utils.sh                    || exit $?


if [[ -z "$name" ]]; then name=initramfs; fi


#
# FUSE
#

grep -q "CONFIG_FUSE_FS=y" $BAREBONES/obj/$CPU/linux/.config
HAS_FUSE=$?

if [ $HAS_FUSE -eq 0 ]; then
  echo -e "${WHT}Compiling FUSE${CLR}"

  SRC_DIR=`pwd`/deps/fuse
  OBJ_DIR=$OBJECTS/fuse

  if [[ ! -d $OBJ_DIR ]]; then
    mkdir -p $OBJ_DIR || exit 10

    (
      cd $OBJ_DIR

      # Configure
  #    CROSS_COMPILE="$TARGET-"  \
      MOUNT_FUSE_PATH=/bin  \
      CC=$TARGET-gcc        \
      CXX=$TARGET-g++       \
      $SRC_DIR/configure    \
          --silent          \
          --prefix=/        \
          --host=$TARGET    \
          --disable-example \
          --disable-mtab    \
          --disable-static  \
          --disable-util    || exit 11

      # Compile
      $MAKE || exit 12

      # Strip binary
      $TARGET-strip lib/.libs/libfuse.so || exit 13
    ) || err $?
  fi

  # Force re-creation of initramfs
  OBJ_DIR=$OBJECTS/initramfs

  if [[ -d $OBJ_DIR ]]; then
    chmod -R u+w $OBJ_DIR &&
    rm    -rf    $OBJ_DIR || exit 14
  fi

  echo -e "${GRN}Successfully compiled FUSE${CLR}"
fi


#
# System dependencies
#

OBJ_DIR=$OBJECTS/initramfs

if [[ ! -d $OBJ_DIR ]]; then
  echo -e "${WHT}Generating initramfs${CLR}"

  mkdir -p $OBJ_DIR || exit 20

  (
    #case $PLATFORM in
    #  qemu)
    #    gunzip -c $BAREBONES/barebones.cpio.gz |
    #    (
    #      cd "$OBJ_DIR";
    #      cpio -i -d -H newc --no-absolute-filenames
    #    ) || exit 21
    #  ;;
    #esac

    #
    # Install FUSE
    #

    if [ $HAS_FUSE -eq 0 ]; then
      mkdir -p $OBJ_DIR/lib                                  &&
      cp -d $OBJECTS/fuse/lib/.libs/libfuse.so* $OBJ_DIR/lib || exit 22
    fi

    #
    # Install system dependencies
    #

    eval "$NPMi" -g `grep -v "^#" packages.txt`      \
        --fuse__include_dirs=`pwd`/deps/fuse/include \
        --fuse__library_dirs=$OBJECTS/fuse/lib/.libs \
        --fuse__libraries=-lfuse                     || exit 23

    ln -fs bin/century $OBJ_DIR/init || exit 24

    mkdir -p $OBJ_DIR/sbin                                    &&
    ln -fs ../bin/nodeos-mount-filesystems $OBJ_DIR/sbin/init || exit 25


    #
    # /usr/bin/env
    #

    mkdir -p  $OBJ_DIR/usr/bin     &&
    cp env.js $OBJ_DIR/usr/bin/env || exit 26
  ) || err $?

  echo -e "${GRN}Successfully generated initramfs${CLR}"
fi


#
# Wrap the system up and pack it
#

# Set initramfs files only accesible to root
chmod -R u-w,go-rw "$OBJ_DIR"             &&
chmod -R o+r       "$OBJ_DIR/usr/bin/env" || exit 30

case $PLATFORM in
  docker)
    docker build -t $name . || exit 31
  ;;
  pc_qemu | pc_iso | raspberry_qemu | raspberry_image)
    mkdir -p `dirname $OUT_DIR`
    (
      cd "$OBJ_DIR";
      find | cpio --owner root:root -o -H newc | gzip
    ) > $OUT_DIR || exit 32

    ln -sfv $OUT_DIR $name.cpio.gz || exit 33
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
