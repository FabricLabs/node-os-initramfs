#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS usersfs

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh &&
source scripts/utils.sh                    || exit $?


if [[ -z "$name" ]]; then name=initramfs; fi


OBJ_DIR=$OBJECTS

if [[ ! -d $OBJECTS ]]; then
  echo -e "${WHT}Generating initramfs${CLR}"

  mkdir -p $OBJECTS || exit 201

  (
    OBJ_DIR=$OBJECTS

    #case $PLATFORM in
    #  qemu)
    #    gunzip -c $BAREBONES/barebones.cpio.gz |
    #    (
    #      cd "$OBJECTS";
    #      cpio -i -d -H newc --no-absolute-filenames
    #    ) || exit 201
    #  ;;
    #esac


    #
    # Install system dependencies
    #

    eval "$NPMi" -g `grep -v "^#" packages.txt` || exit 210

    ln -fs bin/century $OBJECTS/init || exit 211

    mkdir -p $OBJECTS/sbin                                    &&
    ln -fs ../bin/nodeos-mount-filesystems $OBJECTS/sbin/init || exit 212


    #
    # /usr/bin/env
    #

    mkdir -p  $OBJECTS/usr/bin     &&
    cp env.js $OBJECTS/usr/bin/env || exit 220
  ) || err $?

  echo -e "${GRN}Successfully generated initramfs${CLR}"
fi


#
# Wrap the system up and pack it
#

# Set initramfs files only accesible to root
chmod -R u-w,go-rw "$OBJECTS"             &&
chmod -R go+r      "$OBJECTS/usr/bin/env" || exit 230

case $PLATFORM in
  docker)
    docker build -t $name . || exit 231
  ;;
  pc_qemu | pc_iso | raspberry_qemu | raspberry_image)
    mkdir -p `dirname $OUT_DIR`
    (
      cd "$OBJECTS";
      find | cpio --owner root:root -o -H newc | gzip
    ) > $OUT_DIR || exit 232

    ln -sfv $OUT_DIR $name.cpio.gz || exit 28
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
